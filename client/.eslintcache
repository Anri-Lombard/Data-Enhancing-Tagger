[{"/usr/app/src/index.js":"1","/usr/app/src/App.js":"2","/usr/app/src/components/tagging.js":"3","/usr/app/src/components/login.js":"4","/usr/app/src/components/logout.js":"5"},{"size":597,"mtime":1656222406702,"results":"6","hashOfConfig":"7"},{"size":1264,"mtime":1656320360323,"results":"8","hashOfConfig":"7"},{"size":4129,"mtime":1656476106703,"results":"9","hashOfConfig":"7"},{"size":849,"mtime":1656320337647,"results":"10","hashOfConfig":"7"},{"size":426,"mtime":1656313535034,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"woh1uu",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/usr/app/src/index.js",[],["25","26"],"/usr/app/src/App.js",["27","28"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\n// import logo from './logo.svg';\nimport { Route, Routes, Navigate } from \"react-router-dom\";\n\nimport Tagging from './components/tagging'\nimport Login from './components/login'\nimport Logout from './components/logout'\n\nimport { gapi } from 'gapi-script'\n\nconst clientId = \"209297339002-8oele42ri4qokv2qefi8n7bds2a9jmjk.apps.googleusercontent.com\";\n\nfunction App() {\n  // const [loggedIn, setLoggedIn] = useState(false)\n  // const [userName, setUserName] = useState(\"\")\n\n  useEffect(() => {\n    function start() {\n      gapi.auth2.init({\n        client_id: clientId,\n        scope: \"\"\n      })\n    };\n\n    gapi.load('client:auth2', start)\n  })\n\n\n  return (\n    <div className=\"App\">\n      <Routes>\n        {/* <Route exact path=\"/\" element={loggedIn ? <Tagging name={userName} /> : <Navigate to=\"/login\" />} />\n        <Route exact path=\"/login\">\n          loggedIn ? <Navigate to=\"/\" /> : <Login name={setUserName} isLoggedIn={setLoggedIn} />\n        </Route> */}\n        <Route exact path=\"/\" element={<Tagging />} />\n        <Route exact path=\"/login\" element={<Login />} />\n        <Route exact path=\"/logout\" element={<Logout />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","/usr/app/src/components/tagging.js",["29"],"import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n\nconst PORT = 2000;\n\n\n// TODO: continuously stream data when authenticating users\n\n\n// TODO: fix name undefined\nexport default function Tagging(props) {\n  const [tags, setTags] = useState([]);\n  const [tagToUpdate, setTagToUpdate] = useState({});\n  const [chosenCategory, setChosenCategory] = useState(\"\");\n\n  // TODO: dynamic\n  const [tagOptions, setTagOptions] = useState(\n    [\"tagOne\", \"tagTwo\", \"tagThree\", \"tagFour\", \"tagFive\", \"other\"]\n  )\n  \n  const Tag = (props) => (\n    <div>\n    <div>\n      <p>ID: {props.tag.id}</p>\n      <p>Date: {props.tag.date}</p>\n      <p>Description: {props.tag.description}</p>\n      {/* Use react conditioning for if it has a category */}\n      <p>Current Category: {props.tag.category}</p>\n      <p>Users Who Tagged: {props.tag.usersTagged}</p>\n    </div>\n    <form onSubmit={onSubmitHandler}>\n      {tagRadios()}\n      <button id=\"tagBtn\" type=\"submit\" disabled>Tag</button>\n    </form>\n   </div>\n  );\n  \n  // const navigate = useNavigate();\n  \n   \n  async function onSubmitHandler(e) {\n    e.preventDefault()\n    console.log(\"name: \" + props.name);\n    setTimeout(() => {\n      window.location.reload()\n    }, 500)\n    // $tagBtn.disabled = true;\n\n    \n    // TODO: logic for if already tagged.\n    const editedTag = {\n      id: tagToUpdate.id,\n      date: tagToUpdate.date,\n      description: tagToUpdate.description,\n      balance: tagToUpdate.balance,\n      transactionValue: tagToUpdate.transactionValue,\n      category: chosenCategory,\n      // TODO: usersTagged array\n      // usersTagged: tagToUpdate.usersTagged == undefined ? usersTaggedArray : tagToUpdate.usersTagged.push(name)\n    };\n    \n    // console.log(editedTag);\n    \n    // document.getElementsByClassName(\"radio-inputs\").checked = false;\n    document.getElementById(\"tagBtn\").disabled = true;\n    \n    // This will send a post request to update the data in the database.\n    await fetch(`http://localhost:${PORT}/update/${tagToUpdate.id}/`, {\n      method: \"POST\",\n      body: JSON.stringify(editedTag),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    });\n    \n    \n    // TODO: fix navigate\n    // navigate(\"/\", { replace: true });\n  }\n\n  // useEffect(() => {\n  //   setChosenCategory(radioChosen);\n\n  // }, [radioChosen])\n\n  function onChangeHandler(e) {\n    setChosenCategory(e.target.value)\n    document.getElementById(\"tagBtn\").disabled = false;\n  }\n  \n  // TODO: Dynamic tags\n  // This maps out all the tags we have, we'll make it dynamic.\n  // const mostCommonTagsForCompany = [\"tagOne\", \"tagTwo\", \"tagThree\", \"tagFour\", \"tagFive\"]\n  \n  function tagRadios() {\n    return tagOptions.map((tag) => {\n      return (\n        <li key={tag}>\n          <input \n            className=\"radio-inputs\" \n            type=\"radio\" id={tag} \n            name=\"tag\" \n            value={tag} \n            onChange={onChangeHandler} \n          />\n          <label>{tag}</label>\n\n           {/* TODO: other logic */}\n          {tag === \"other\" ? <input type=\"text\" name={tag} placeholder=\"specify\" /> : null}\n        </li>\n      )\n    })\n  }\n \n // This method fetches the tags from the database.\n useEffect(() => {\n   async function getTags() {\n     const response = await fetch(`http://localhost:${PORT}/tag/`);\n \n     if (!response.ok) {\n       const message = `An error occurred: ${response.statusText}`;\n       window.alert(message);\n       return;\n     }\n\n     const tags = await response.json();\n\n     setTags(tags);\n   }\n \n   getTags();\n \n   return;\n }, [tags.length]);\n\n useEffect(() => {\n  // Random: items[Math.floor(Math.random()*items.length)]\n  const randomKey = 5;\n  const randomData = tags[randomKey];\n  if (randomData !== undefined) {\n    setTagToUpdate(randomData)\n  }\n }, [tags]);\n\n\n function getSingleTag() {\n  return <Tag tag={tagToUpdate} />\n }\n\n // TODO: Add styling and then the tag data once json is fixed.\n // This following section will display the table with the tags the user hasn't tagged.\n return (\n   <div>\n     <h3>Manual Tagger</h3>\n    {getSingleTag()}\n   </div>\n );\n}","/usr/app/src/components/login.js",[],"/usr/app/src/components/logout.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":1,"column":28,"nodeType":"36","messageId":"37","endLine":1,"endColumn":36},{"ruleId":"34","severity":1,"message":"38","line":4,"column":25,"nodeType":"36","messageId":"37","endLine":4,"endColumn":33},{"ruleId":"34","severity":1,"message":"39","line":17,"column":22,"nodeType":"36","messageId":"37","endLine":17,"endColumn":35},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Navigate' is defined but never used.","'setTagOptions' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]