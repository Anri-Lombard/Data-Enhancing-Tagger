[{"/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/hooks/tagging-store.js":"1","/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/components/tagging.js":"2","/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/components/tagRadios.js":"3","/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/App.js":"4","/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/components/login.js":"5"},{"size":3825,"mtime":1657804700000,"results":"6","hashOfConfig":"7"},{"size":4397,"mtime":1657804685000,"results":"8","hashOfConfig":"7"},{"size":1329,"mtime":1657802981000,"results":"9","hashOfConfig":"7"},{"size":1848,"mtime":1657721675000,"results":"10","hashOfConfig":"7"},{"size":1332,"mtime":1657721675000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qgg2kq",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/hooks/tagging-store.js",[],"/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/components/tagging.js",["23","24"],"import React, { useEffect } from \"react\";\nimport NavBar from './navbar.js';\nimport Footer from './footer.js';\nimport Tag from './tag.js';\nimport TagRadios from './tagRadios.js';\nimport '../css/tagging.css';\nimport { useStore } from '../hooks/store';\n\n\nconst PORT = 2000;\n\nconst Tagging = React.memo(({ name, user }) => {\n  const [state, dispatch] = useStore();\n\n  useEffect(() => {\n    dispatch('filter', \"\");\n  }, [])\n\n  useEffect(() => {\n    async function getOneTag() {\n      const response = await fetch(`http://localhost:${PORT}/tag/one`);\n\n      if (!response.ok) {\n        const message = `An error occurred: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const tag = await response.json();\n\n      dispatch('setTagToUpdate', tag)\n    }\n\n    getOneTag();\n  }, [state.visibleOptions]);\n\n\n  const filter = (e) => {\n    const keyword = e.target.value;\n\n    dispatch('filter', keyword);\n  };\n\n\n  async function onSubmitHandler(e) {\n    e.preventDefault();\n\n    let dataTagged = false;\n    let userCategoriesArray = [];\n    let usersTaggedArray = [];\n    let editedTag = [];\n    let updatedChosenCategory = \"\";\n    let updatedTagOptions = \"\";\n\n    // userCategories\n    if (state.tagToUpdate.userCategories === undefined) {\n      userCategoriesArray = new Array(state.chosenCategory);\n    } else {\n      state.tagToUpdate.userCategories.push(state.chosenCategory);\n      userCategoriesArray = state.tagToUpdate.userCategories;\n    }\n\n    // usersTagged\n    if (state.tagToUpdate.usersTagged === undefined) {\n      usersTaggedArray = new Array(user);\n    } else {\n      state.tagToUpdate.usersTagged.push(user);\n      usersTaggedArray = state.tagToUpdate.usersTagged;\n    }\n\n    if (userCategoriesArray.length === 1) {\n      updatedChosenCategory = userCategoriesArray[0];\n      // setChosenCategory(userCategoriesArray[0])\n    } else if (userCategoriesArray.length === 2) {\n      if (userCategoriesArray[0] !== userCategoriesArray[1]) {\n        // Decision state\n        updatedTagOptions = [userCategoriesArray[0], userCategoriesArray[1]]\n        updatedChosenCategory = userCategoriesArray[1];\n        // setChosenCategory(userCategoriesArray[1]);\n      } else {\n        // Agrees\n        dataTagged = true;\n      }\n    } else {\n      dataTagged = true;\n      updatedChosenCategory = userCategoriesArray[2];\n      // setChosenCategory(userCategoriesArray[2]);\n    }\n\n    // userCategoriesArray is undefined\n    editedTag = {\n      id: state.tagToUpdate.id,\n      date: state.tagToUpdate.date,\n      description: state.tagToUpdate.description,\n      balance: state.tagToUpdate.balance,\n      transactionValue: state.tagToUpdate.transactionValue,\n      category: updatedChosenCategory,\n      usersTagged: usersTaggedArray,\n      userCategories: userCategoriesArray,\n      tagged: dataTagged\n    };\n    \n    await fetch(`http://localhost:${PORT}/update/${state.tagToUpdate.id}/`, {\n      method: \"POST\",\n      body: JSON.stringify(editedTag),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    });\n\n    dispatch('updateTag', updatedTagOptions)\n\n    document.getElementById(\"tagBtn\").disabled = true;\n  }\n\n  function onChangeHandler(e) {\n    const category = e.target.value;\n    dispatch('setChosenCategory', category);\n    document.getElementById(\"tagBtn\").disabled = false;\n  }\n\n  return (\n    <>\n      <NavBar name={name} />\n\n      <div className=\"header\">\n        <h3>Tag Data With Following Details:</h3>\n\n        {/* Details */}\n        <Tag tag={state.tagToUpdate} />\n\n        {/* Filter */}\n        <div className=\"form-box search-box shadow-none\">\n          <input\n            type=\"search\"\n            value={state.query}\n            onChange={filter}\n            className=\"input form-control shadow-none\"\n            placeholder=\"Search\"\n            autoFocus\n          />\n        </div>\n\n        {/* Options */}\n        <div className=\"form-box\">\n          <form onSubmit={onSubmitHandler}>\n            <div className=\"form-box-static\">\n              <TagRadios\n                tagToUpdate={state.tagToUpdate}\n                visibleOptions={state.visibleOptions}\n                onChangeHandler={onChangeHandler}\n              />\n            </div>\n            <button id=\"tagBtn\" type=\"submit\" disabled>Tag</button>\n          </form>\n        </div>\n      </div>\n\n      <Footer />\n    </>\n  );\n})\n\nexport default Tagging;\n","/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/components/tagRadios.js",[],"/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/App.js",["25"],"/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/components/login.js",[],{"ruleId":"26","severity":1,"message":"27","line":17,"column":6,"nodeType":"28","endLine":17,"endColumn":8,"suggestions":"29"},{"ruleId":"26","severity":1,"message":"27","line":35,"column":6,"nodeType":"28","endLine":35,"endColumn":28,"suggestions":"30"},{"ruleId":"31","severity":1,"message":"32","line":1,"column":38,"nodeType":"33","messageId":"34","endLine":1,"endColumn":46},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["35"],["36"],"no-unused-vars","'Suspense' is defined but never used.","Identifier","unusedVar",{"desc":"37","fix":"38"},{"desc":"39","fix":"40"},"Update the dependencies array to be: [dispatch]",{"range":"41","text":"42"},"Update the dependencies array to be: [dispatch, state.visibleOptions]",{"range":"43","text":"44"},[415,417],"[dispatch]",[806,828],"[dispatch, state.visibleOptions]"]