[{"/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/components/tagging.js":"1"},{"size":5292,"mtime":1657540010000,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"7h52kw","/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/components/tagging.js",["7","8"],"import React, { useEffect, useState } from \"react\";\nimport NavBar from './navbar.js';\nimport Footer from './footer.js';\nimport '../css/tagging.css';\nimport Tag from './tag.js';\nimport TagRadios from './tagRadios.js';\n\nconst PORT = 2000;\n\nexport default function Tagging({ name, user }) {\n  const [tagToUpdate, setTagToUpdate] = useState({});\n\n  // hardcoded for now\n  let dataTagged = false;\n  let userCategoriesArray = []\n  const usersTaggedArray = new Array(user)\n  let editedTag = [];\n  let tagOptions = [\"tagOne\", \"tagTwo\", \"tagThree\", \"tagFour\", \"tagFive\"];\n\n  // tagOptions logic\n  \n  const [tags, setTags] = useState([]);\n  const [oneTag, setOneTag] = useState();\n  const [chosenCategory, setChosenCategory] = useState(\"\");\n  // this will display the options to choose from and will be changed\n  const [visibleOptions, setVisibleOptions] = useState(tagOptions)\n  const [query, setQuery] = useState('');\n\n  // TODO: Add tons more options\n  // the options will be outlined by Dirk \n\n\n  // TODO:\n  // 1. Boolean = if 2 users tagged + 2 categories are the same, then true (tagged completely)\n  //    else if 2 users tagged + 2 categories not the same, then decision state.\n  // 2. Search algorithm for untagged data\n  //    - If tagged by user, don't show for user.\n  //    - if tagged completely, don't show to anyone.\n  //    ---- Obviously, as data gets more, this can become inefficient.\n  // 3. DONE SCREEN - no data to tag.\n  //\n  // Solution:\n  // - S: findOne mongodb method for one at a time, and updateMany to tagged = false\n\n  // filter function \n  const filter = (e) => {\n    const keyword = e.target.value;\n\n    if (keyword !== '') {\n      const results = tagOptions.filter((option) => {\n        return option.toLowerCase().includes(keyword.toLowerCase());\n      });\n      setVisibleOptions(results);\n    } else {\n      setVisibleOptions(tagOptions);\n    }\n\n    setQuery(keyword);\n  };\n\n\n  async function onSubmitHandler(e) {\n    e.preventDefault();\n    setTimeout(() => {\n      window.location.reload()\n    }, 200)\n    \n    if (tagToUpdate.userCategories !== undefined) {\n      userCategoriesArray = tagToUpdate.userCategories.length === 0 ? \n                            new Array(chosenCategory) : \n                            tagToUpdate.userCategories.push(chosenCategory);\n      \n      if (userCategoriesArray.length >= 2) {\n        if (userCategoriesArray.length === 2) {\n          if (userCategoriesArray[0] !== userCategoriesArray[1]) {\n            tagOptions = [userCategoriesArray[0], userCategoriesArray[1]]\n            dataTagged = true;\n            setChosenCategory(userCategoriesArray[1]);\n          }\n        } else if (userCategoriesArray === 3) {\n          dataTagged = true;\n          setChosenCategory(userCategoriesArray[2]);\n        }\n      } else {\n        setChosenCategory(userCategoriesArray[0])\n      }\n    }\n                          \n\n    editedTag = {\n      id: tagToUpdate.id,\n      date: tagToUpdate.date,\n      description: tagToUpdate.description,\n      balance: tagToUpdate.balance,\n      transactionValue: tagToUpdate.transactionValue,\n      category: chosenCategory,\n      usersTagged: usersTaggedArray,\n      userCategories: userCategoriesArray,\n      tagged: dataTagged\n    };\n\n    document.getElementById(\"tagBtn\").disabled = true;\n\n    await fetch(`http://localhost:${PORT}/update/${tagToUpdate.id}/`, {\n      method: \"POST\",\n      body: JSON.stringify(editedTag),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    });\n  }\n\n  function onChangeHandler(e) {\n    setChosenCategory(e.target.value)\n    document.getElementById(\"tagBtn\").disabled = false;\n  }\n\n  useEffect(() => {\n    async function getOneTag() {\n      const response = await fetch(`http://localhost:${PORT}/tag/one`);\n\n      if (!response.ok) {\n        const message = `An error occurred: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const tag = await response.json();\n\n      setOneTag(tag);\n    }\n    \n    getOneTag();\n    \n    \n    return;\n  }, []);\n\n  useEffect(() => {\n    console.log(oneTag)\n    if (oneTag !== undefined && oneTag !== null) {\n      setTagToUpdate(oneTag)\n    }\n  }, [oneTag]);\n  \n  function getUpdatedTagRadios() {\n    console.log(\"visibleOptions: \" + visibleOptions);\n    return <TagRadios visibleOptions={visibleOptions} onChangeHandler={onChangeHandler} />\n  }\n  \n  // this needs to change when we implement getting single tag instead of an array\n  function getSingleTag() {\n    return <Tag tag={tagToUpdate} />\n  }\n  \n  return (\n    <>\n      <NavBar name={name} />\n\n      <div className=\"header\">\n        <h3>Tag Data With Following Details:</h3>\n\n        {/* Details */}\n        {getSingleTag()}\n\n        {/* Filter */}\n        <div className=\"form-box search-box\">\n          <input\n            type=\"search\"\n            value={query}\n            onChange={filter}\n            className=\"input form-control\"\n            placeholder=\"Search\"\n            autoFocus\n          />\n        </div>\n\n        {/* Options */}\n        <div className=\"form-box\">\n          <form onSubmit={onSubmitHandler}>\n            {getUpdatedTagRadios()}\n            <button id=\"tagBtn\" type=\"submit\" disabled>Tag</button>\n          </form>\n        </div>\n      </div>\n\n      <Footer />\n    </>\n  );\n}\n\n\n\n",{"ruleId":"9","severity":1,"message":"10","line":22,"column":10,"nodeType":"11","messageId":"12","endLine":22,"endColumn":14},{"ruleId":"9","severity":1,"message":"13","line":22,"column":16,"nodeType":"11","messageId":"12","endLine":22,"endColumn":23},"no-unused-vars","'tags' is assigned a value but never used.","Identifier","unusedVar","'setTags' is assigned a value but never used."]

