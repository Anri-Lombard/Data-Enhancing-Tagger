[{"/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/components/tagging.js":"1"},{"size":5302,"mtime":1658522075000,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1qgg2kq","/Volumes/EXT_DRIVE_2TB_1/app_dev/SprintHive/Data-Enhancing-Tagger/client/src/components/tagging.js",["7","8","9","10"],"import React, { useEffect } from \"react\";\nimport NavBar from './navbar.js';\nimport Footer from './footer.js';\nimport Tag from './tag.js';\nimport TagRadios from './tagRadios.js';\nimport '../css/tagging.css';\nimport { useStore } from '../hooks/store';\n\n\nconst PORT = 2000;\n\nconst Tagging = React.memo(({ name, user }) => {\n  const [state, dispatch] = useStore();\n  let optionSelection = 0;\n\n  useEffect(() => {\n    dispatch('filter', \"\");\n  }, [])\n\n  // TODO: fix continuous run\n  async function getOneTag() {\n    console.log(\"Called\");\n    const response = await fetch(`http://localhost:${PORT}/tag/one`);\n\n    if (!response.ok) {\n      const message = `An error occurred: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n\n    const tag = await response.json();\n\n    dispatch('setTagToUpdate', tag)\n  }\n\n  // Tag at the start\n  useEffect(() => {\n    getOneTag();\n  }, []);\n\n\n  const filter = (e) => {\n    const keyword = e.target.value;\n\n    // Update tag for potential changes when typing\n    getOneTag();\n\n    // TODO: fix for 2 options\n    dispatch('filter', keyword);\n  };\n\n\n  async function onSubmitHandler(e) {\n    e.preventDefault();\n\n    // get tag\n    getOneTag();\n    // update tag\n    getOneTag();\n\n    let dataTagged = false;\n    let userCategoriesArray = [];\n    let usersTaggedArray = [];\n    let editedTag = [];\n    let updatedChosenCategory = \"\";\n\n    // userCategories\n    if (state.tagToUpdate.userCategories === undefined) {\n      userCategoriesArray = new Array(state.chosenCategory);\n    } else {\n      state.tagToUpdate.userCategories.push(state.chosenCategory);\n      userCategoriesArray = state.tagToUpdate.userCategories;\n    }\n\n    // usersTagged\n    if (state.tagToUpdate.usersTagged === undefined) {\n      usersTaggedArray = new Array(user);\n    } else {\n      state.tagToUpdate.usersTagged.push(user);\n      usersTaggedArray = state.tagToUpdate.usersTagged;\n    }\n\n    if (userCategoriesArray.length === 1) {\n      updatedChosenCategory = userCategoriesArray[0];\n      // setChosenCategory(userCategoriesArray[0])\n    } else if (userCategoriesArray.length === 2) {\n      if (userCategoriesArray[0] !== userCategoriesArray[1]) {\n        // Decision state\n        updatedChosenCategory = userCategoriesArray[1];\n        // setChosenCategory(userCategoriesArray[1]);\n      } else {\n        // Agrees\n        dataTagged = true;\n      }\n    } else {\n      dataTagged = true;\n      updatedChosenCategory = userCategoriesArray[2];\n      // setChosenCategory(userCategoriesArray[2]);\n    }\n\n    // userCategoriesArray is undefined\n    editedTag = {\n      ...state.tagToUpdate,\n      category: updatedChosenCategory,\n      usersTagged: usersTaggedArray,\n      userCategories: userCategoriesArray,\n      tagged: dataTagged\n    };\n    \n    document.getElementById(\"tagBtn\").disabled = true;\n\n    // add class to details element when submitting\n    document.getElementById(\"details\").classList.add(\"fade\");\n    setTimeout(() => {\n      document.getElementById(\"details\").classList.remove(\"fade\");\n    }, 1000)\n\n    // document.getElementById(\"search-input\").value = \"\";\n    dispatch('filter', \"\");\n    document.getElementById(\"search-input\").focus();\n\n    await fetch(`http://localhost:${PORT}/update/${state.tagToUpdate.id}/`, {\n      method: \"POST\",\n      body: JSON.stringify(editedTag),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    });\n\n  }\n\n  function onChangeHandler(e) {\n    const category = e.target.value;\n    dispatch('setChosenCategory', category);\n    document.getElementById(\"tagBtn\").disabled = false;\n  }\n\n  function onKeyPressHandler(e) {\n    if (e.key === \"Enter\") {\n      console.log(\"Sumbit this choice\");\n      document.getElementById(optionSelection).checked = \"checked\";\n    } else if (e.key === \" \") {\n      console.log(\"Scroll to next choice\");\n    }\n  }\n\n  function myFunction() {\n    var popup = document.getElementById(\"myPopup\");\n    popup.classList.toggle(\"show\");\n  }\n\n  // TODO: getServerSideProps() rather than useEffect()\n  async function getServerSideProps(context) {\n\n\n    return {\n      props: {\n        \n      }\n    }\n  }\n\n  return (\n    <>\n      <NavBar name={name} />\n\n      <div className=\"header\">\n        {/* <h3>Tag Data With Following:</h3> */}\n        <div id=\"details\"> {/* Details */}\n          <Tag tag={state.tagToUpdate} />\n        </div>\n       \n\n        {/* Filter */}\n        <div className=\"form-box search-box shadow-none\">\n          <input\n            id=\"search-input\"\n            type=\"search\"\n            value={state.query}\n            onChange={filter}\n            className=\"input form-control shadow-none\"\n            placeholder=\"Search\"\n            autoFocus\n            onKeyPress={onKeyPressHandler}\n\n          />\n        </div>\n\n        {/* Options */}\n        <div className=\"form-box\">\n          <form onSubmit={onSubmitHandler}>\n            <div className=\"form-box-static\">\n              <TagRadios\n                tagToUpdate={state.tagToUpdate}\n                visibleOptions={state.visibleOptions}\n                onChangeHandler={onChangeHandler}\n              />\n            </div>\n            <button id=\"tagBtn\" type=\"submit\" disabled >Tag</button>\n          </form>\n        </div>\n      </div>\n\n      <Footer />\n    </>\n  );\n})\n\nexport default Tagging;\n",{"ruleId":"11","severity":1,"message":"12","line":18,"column":6,"nodeType":"13","endLine":18,"endColumn":8,"suggestions":"14"},{"ruleId":"11","severity":1,"message":"15","line":39,"column":6,"nodeType":"13","endLine":39,"endColumn":8,"suggestions":"16"},{"ruleId":"17","severity":1,"message":"18","line":147,"column":12,"nodeType":"19","messageId":"20","endLine":147,"endColumn":22},{"ruleId":"17","severity":1,"message":"21","line":153,"column":18,"nodeType":"19","messageId":"20","endLine":153,"endColumn":36},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["22"],"React Hook useEffect has a missing dependency: 'getOneTag'. Either include it or remove the dependency array.",["23"],"no-unused-vars","'myFunction' is defined but never used.","Identifier","unusedVar","'getServerSideProps' is defined but never used.",{"desc":"24","fix":"25"},{"desc":"26","fix":"27"},"Update the dependencies array to be: [dispatch]",{"range":"28","text":"29"},"Update the dependencies array to be: [getOneTag]",{"range":"30","text":"31"},[442,444],"[dispatch]",[892,894],"[getOneTag]"]